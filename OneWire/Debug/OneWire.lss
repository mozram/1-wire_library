
OneWire.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800200  000002fc  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea0  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000617  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001449  00000000  00000000  000019c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00016b81  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000516  00000000  00000000  00019b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0001a017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00006833  00000000  00000000  0001a097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
   6:	00 00       	nop
   8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
   a:	00 00       	nop
   c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
   e:	00 00       	nop
  10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
  12:	00 00       	nop
  14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
  16:	00 00       	nop
  18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
  22:	00 00       	nop
  24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
  26:	00 00       	nop
  28:	a4 c0       	rjmp	.+328    	; 0x172 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
  36:	00 00       	nop
  38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
  3e:	00 00       	nop
  40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>
  42:	00 00       	nop
  44:	96 c0       	rjmp	.+300    	; 0x172 <__bad_interrupt>
  46:	00 00       	nop
  48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>
  4e:	00 00       	nop
  50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
  52:	00 00       	nop
  54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
  56:	00 00       	nop
  58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
  5e:	00 00       	nop
  60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
  62:	00 00       	nop
  64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
  66:	00 00       	nop
  68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
  6e:	00 00       	nop
  70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
  72:	00 00       	nop
  74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
  76:	00 00       	nop
  78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
  7e:	00 00       	nop
  80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
  82:	00 00       	nop
  84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
  86:	00 00       	nop
  88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
  8e:	00 00       	nop
  90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
  92:	00 00       	nop
  94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
  96:	00 00       	nop
  98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	62 c0       	rjmp	.+196    	; 0x172 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	60 c0       	rjmp	.+192    	; 0x172 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	5e c0       	rjmp	.+188    	; 0x172 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	5c c0       	rjmp	.+184    	; 0x172 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	5a c0       	rjmp	.+180    	; 0x172 <__bad_interrupt>
  be:	00 00       	nop
  c0:	58 c0       	rjmp	.+176    	; 0x172 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	56 c0       	rjmp	.+172    	; 0x172 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	54 c0       	rjmp	.+168    	; 0x172 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	52 c0       	rjmp	.+164    	; 0x172 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	50 c0       	rjmp	.+160    	; 0x172 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	4c c0       	rjmp	.+152    	; 0x172 <__bad_interrupt>
  da:	00 00       	nop
  dc:	4a c0       	rjmp	.+148    	; 0x172 <__bad_interrupt>
  de:	00 00       	nop
  e0:	48 c0       	rjmp	.+144    	; 0x172 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	46 c0       	rjmp	.+140    	; 0x172 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	42 c0       	rjmp	.+132    	; 0x172 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	40 c0       	rjmp	.+128    	; 0x172 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	3e c0       	rjmp	.+124    	; 0x172 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	3c c0       	rjmp	.+120    	; 0x172 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	3a c0       	rjmp	.+116    	; 0x172 <__bad_interrupt>
  fe:	00 00       	nop
 100:	38 c0       	rjmp	.+112    	; 0x172 <__bad_interrupt>
 102:	00 00       	nop
 104:	36 c0       	rjmp	.+108    	; 0x172 <__bad_interrupt>
 106:	00 00       	nop
 108:	34 c0       	rjmp	.+104    	; 0x172 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	32 c0       	rjmp	.+100    	; 0x172 <__bad_interrupt>
 10e:	00 00       	nop
 110:	30 c0       	rjmp	.+96     	; 0x172 <__bad_interrupt>
 112:	00 00       	nop
 114:	2e c0       	rjmp	.+92     	; 0x172 <__bad_interrupt>
 116:	00 00       	nop
 118:	2c c0       	rjmp	.+88     	; 0x172 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	2a c0       	rjmp	.+84     	; 0x172 <__bad_interrupt>
 11e:	00 00       	nop
 120:	28 c0       	rjmp	.+80     	; 0x172 <__bad_interrupt>
 122:	00 00       	nop
 124:	26 c0       	rjmp	.+76     	; 0x172 <__bad_interrupt>
 126:	00 00       	nop
 128:	24 c0       	rjmp	.+72     	; 0x172 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	22 c0       	rjmp	.+68     	; 0x172 <__bad_interrupt>
 12e:	00 00       	nop
 130:	20 c0       	rjmp	.+64     	; 0x172 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ec ef       	ldi	r30, 0xFC	; 252
 14c:	f2 e0       	ldi	r31, 0x02	; 2
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a0 37       	cpi	r26, 0x70	; 112
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
 15e:	22 e0       	ldi	r18, 0x02	; 2
 160:	a0 e7       	ldi	r26, 0x70	; 112
 162:	b2 e0       	ldi	r27, 0x02	; 2
 164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
 166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
 168:	a0 37       	cpi	r26, 0x70	; 112
 16a:	b2 07       	cpc	r27, r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
 16e:	49 d0       	rcall	.+146    	; 0x202 <main>
 170:	c3 c0       	rjmp	.+390    	; 0x2f8 <_exit>

00000172 <__bad_interrupt>:
 172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <w1_reset>:

bit w1_reset(void)
{
  bit err;

  W1_OUT &= ~(1<<W1_PIN); //drive bus low
 174:	75 98       	cbi	0x0e, 5	; 14
  W1_DDR |= 1<<W1_PIN; // set pin as output
 176:	6d 9a       	sbi	0x0d, 5	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	85 e8       	ldi	r24, 0x85	; 133
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <w1_reset+0x6>
 17e:	00 00       	nop
  _delay_us(50); // reset time low
  //DELAY( DELAY_US( 480 ));			// 480 us
  cli();
 180:	f8 94       	cli
  W1_DDR &= ~(1<<W1_PIN); //set pin as input. Release bus
 182:	6d 98       	cbi	0x0d, 5	; 13
 184:	e5 e1       	ldi	r30, 0x15	; 21
 186:	ea 95       	dec	r30
 188:	f1 f7       	brne	.-4      	; 0x186 <w1_reset+0x12>
 18a:	00 00       	nop
  _delay_us(8); // timeslot duration 8 us
  //DELAY( DELAY_US( 66 ));
  err = W1_IN & (1<<W1_PIN);			// no presence detect
 18c:	8c b1       	in	r24, 0x0c	; 12
  Enable_global_interrupt();
 18e:	78 94       	sei
 190:	eb e3       	ldi	r30, 0x3B	; 59
 192:	f3 e0       	ldi	r31, 0x03	; 3
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <w1_reset+0x20>
 198:	00 c0       	rjmp	.+0      	; 0x19a <w1_reset+0x26>
 19a:	00 00       	nop
  _delay_us(480-66);
  //DELAY( DELAY_US( 480 - 66 ));
  if( (W1_IN & (1<<W1_PIN)) == 0 )		// short circuit
 19c:	65 9b       	sbis	0x0c, 5	; 12
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <w1_reset+0x30>
  //DELAY( DELAY_US( 480 ));			// 480 us
  cli();
  W1_DDR &= ~(1<<W1_PIN); //set pin as input. Release bus
  _delay_us(8); // timeslot duration 8 us
  //DELAY( DELAY_US( 66 ));
  err = W1_IN & (1<<W1_PIN);			// no presence detect
 1a0:	80 72       	andi	r24, 0x20	; 32
 1a2:	08 95       	ret
  Enable_global_interrupt();
  _delay_us(480-66);
  //DELAY( DELAY_US( 480 - 66 ));
  if( (W1_IN & (1<<W1_PIN)) == 0 )		// short circuit
    err = 1;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
  return err;
}
 1a6:	08 95       	ret

000001a8 <uinit>:
#include "main.h"


void uinit( void )
{
  UBRR1L = bauddivider;			//set baud rate
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
  UBRR1H = bauddivider >> 8;
 1ae:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
  UCSR1A = 0;				//no U2X, MPCM
 1b2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
  UCSR1C = (1<<USBS1)|(3<<UCSZ10);	//8 Bit
 1b6:	8e e0       	ldi	r24, 0x0E	; 14
 1b8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
  UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 1bc:	88 e1       	ldi	r24, 0x18	; 24
 1be:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
 1c2:	08 95       	ret

000001c4 <uputchar>:
}


void uputchar( char c )
{
  while( (UCSR1A & 1<<UDRE1) == 0 );
 1c4:	e8 ec       	ldi	r30, 0xC8	; 200
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	90 81       	ld	r25, Z
 1ca:	95 ff       	sbrs	r25, 5
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <uputchar+0x4>
  UDR1 = c;
 1ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 1d2:	08 95       	ret

000001d4 <uputs>:
}


void uputs( char *s )
{
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	ec 01       	movw	r28, r24
  while( *s )
 1da:	88 81       	ld	r24, Y
 1dc:	88 23       	and	r24, r24
 1de:	29 f0       	breq	.+10     	; 0x1ea <uputs+0x16>
 1e0:	21 96       	adiw	r28, 0x01	; 1
    uputchar( *s++ );
 1e2:	f0 df       	rcall	.-32     	; 0x1c4 <uputchar>
}


void uputs( char *s )
{
  while( *s )
 1e4:	89 91       	ld	r24, Y+
 1e6:	81 11       	cpse	r24, r1
 1e8:	fc cf       	rjmp	.-8      	; 0x1e2 <uputs+0xe>
    uputchar( *s++ );
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <uputsnl>:


void uputsnl( char *s )
{
  uputs( s );
 1f0:	f1 df       	rcall	.-30     	; 0x1d4 <uputs>
  uputchar( 0x0D );
 1f2:	8d e0       	ldi	r24, 0x0D	; 13
 1f4:	e7 cf       	rjmp	.-50     	; 0x1c4 <uputchar>
 1f6:	08 95       	ret

000001f8 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 1f8:	2c 9a       	sbi	0x05, 4	; 5
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 1fa:	24 9a       	sbi	0x04, 4	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 1fc:	6c 98       	cbi	0x0d, 4	; 13
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 1fe:	74 9a       	sbi	0x0e, 4	; 14
 200:	08 95       	ret

00000202 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
 202:	fa df       	rcall	.-12     	; 0x1f8 <board_init>

	/* Insert application code here, after the board has been initialized. */

	uinit();
 204:	d1 df       	rcall	.-94     	; 0x1a8 <uinit>
	Enable_global_interrupt();
 206:	78 94       	sei
	uputsnl( "1-Wire-Reader:\r\n" );
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	92 e0       	ldi	r25, 0x02	; 2
 20c:	f1 df       	rcall	.-30     	; 0x1f0 <uputsnl>

	for(;;){				// main loop

		bit err;
		err = w1_reset();
 20e:	b2 df       	rcall	.-156    	; 0x174 <w1_reset>
// 		Enable_global_interrupt();
// 		_delay_us(480-66);
// 		if( (W1_IN & (1<<W1_PIN)) == 0 )		// short circuit
// 		err = 1;

		if(err == 32)
 210:	80 32       	cpi	r24, 0x20	; 32
 212:	29 f4       	brne	.+10     	; 0x21e <main+0x1c>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 214:	2c 9a       	sbi	0x05, 4	; 5
		{
			ioport_set_pin_high(LED_ON_BOARD);
			uputsnl("No device detected!\r\n");
 216:	81 e1       	ldi	r24, 0x11	; 17
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	ea df       	rcall	.-44     	; 0x1f0 <uputsnl>
 21c:	12 c0       	rjmp	.+36     	; 0x242 <main+0x40>
		}
		else if(err == 0){
 21e:	81 11       	cpse	r24, r1
 220:	05 c0       	rjmp	.+10     	; 0x22c <main+0x2a>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 222:	2c 98       	cbi	0x05, 4	; 5
			ioport_set_pin_low(LED_ON_BOARD);
			uputsnl("Device detected!\r\n");
 224:	87 e2       	ldi	r24, 0x27	; 39
 226:	92 e0       	ldi	r25, 0x02	; 2
 228:	e3 df       	rcall	.-58     	; 0x1f0 <uputsnl>
 22a:	0b c0       	rjmp	.+22     	; 0x242 <main+0x40>
			}
		else if(err == 1){
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	29 f4       	brne	.+10     	; 0x23a <main+0x38>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 230:	2c 9a       	sbi	0x05, 4	; 5
			ioport_set_pin_high(LED_ON_BOARD);
			uputsnl("Wire is shorted. Check connection!\r\n");
 232:	8a e3       	ldi	r24, 0x3A	; 58
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	dc df       	rcall	.-72     	; 0x1f0 <uputsnl>
 238:	04 c0       	rjmp	.+8      	; 0x242 <main+0x40>
 23a:	2c 9a       	sbi	0x05, 4	; 5
		}
		else{
			ioport_set_pin_high(LED_ON_BOARD);
			uputsnl("Unknown error!\r\n");
 23c:	8f e5       	ldi	r24, 0x5F	; 95
 23e:	92 e0       	ldi	r25, 0x02	; 2
 240:	d7 df       	rcall	.-82     	; 0x1f0 <uputsnl>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	81 ee       	ldi	r24, 0xE1	; 225
 246:	94 e0       	ldi	r25, 0x04	; 4
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <main+0x46>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x50>
 252:	00 00       	nop
 254:	2f ef       	ldi	r18, 0xFF	; 255
 256:	81 ee       	ldi	r24, 0xE1	; 225
 258:	94 e0       	ldi	r25, 0x04	; 4
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x58>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x62>
 264:	00 00       	nop
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	81 ee       	ldi	r24, 0xE1	; 225
 26a:	94 e0       	ldi	r25, 0x04	; 4
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x6a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x74>
 276:	00 00       	nop
 278:	2f ef       	ldi	r18, 0xFF	; 255
 27a:	81 ee       	ldi	r24, 0xE1	; 225
 27c:	94 e0       	ldi	r25, 0x04	; 4
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x7c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x86>
 288:	00 00       	nop
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	81 ee       	ldi	r24, 0xE1	; 225
 28e:	94 e0       	ldi	r25, 0x04	; 4
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x8e>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x98>
 29a:	00 00       	nop
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	81 ee       	ldi	r24, 0xE1	; 225
 2a0:	94 e0       	ldi	r25, 0x04	; 4
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0xa0>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0xaa>
 2ac:	00 00       	nop
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	81 ee       	ldi	r24, 0xE1	; 225
 2b2:	94 e0       	ldi	r25, 0x04	; 4
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0xb2>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0xbc>
 2be:	00 00       	nop
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	81 ee       	ldi	r24, 0xE1	; 225
 2c4:	94 e0       	ldi	r25, 0x04	; 4
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0xc4>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0xce>
 2d0:	00 00       	nop
 2d2:	2f ef       	ldi	r18, 0xFF	; 255
 2d4:	81 ee       	ldi	r24, 0xE1	; 225
 2d6:	94 e0       	ldi	r25, 0x04	; 4
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0xd6>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0xe0>
 2e2:	00 00       	nop
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	81 ee       	ldi	r24, 0xE1	; 225
 2e8:	94 e0       	ldi	r25, 0x04	; 4
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <main+0xe8>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0xf2>
 2f4:	00 00       	nop
 2f6:	8b cf       	rjmp	.-234    	; 0x20e <main+0xc>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
